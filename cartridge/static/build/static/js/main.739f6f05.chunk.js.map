{"version":3,"sources":["scripts/helpers.ts","scripts/fieldNode.ts","scripts/formGroup.ts","scripts/store.ts","components/ListItem.tsx","components/DynamicList.tsx","components/Home.tsx","components/GroupPage.tsx","data/selectTypes.ts","components/TextInput.tsx","components/OptionForm.tsx","components/FormListItem.tsx","components/DynamicFormList.tsx","components/FieldPage.tsx","components/StoreWrapper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["uuID","Math","random","toString","substr","getGroupDataObj","obj","Object","keys","reduce","acc","cur","getGroupData","getFieldDataObj","getFieldData","FieldNode","prop","title","type","required","placeholder","checked","pattern","minLength","maxLength","options","_id","_subGroups","_subGroupsData","_subFields","_subFieldsData","_parent","_position","_fieldType","this","id","subGroups","convertToNodeObj","subGroupsData","FormGroup","subFields","subFieldsData","parent","fieldType","createGroup","indObj","groupNode","removeNode","filteredGroup","cleanData","createField","fieldNode","value","label","selected","filter","v","opt","map","list","forEach","item","key","groupType","input","_groupType","fields","fieldsData","gSubFields","nodeClass","data","groupArr","dataObj","node","Root","description","group","groupData","str","ListItem","index","onGoToGroup","onDelete","draggableId","provided","dragHandleProps","draggableProps","ref","innerRef","background","border","borderColor","borderRadius","w","flex","alignItems","d","onClick","_hover","color","justifyContent","UpDown","aria-label","icon","Delete","DynamicList","onAdd","handleOnDragEnd","components","mb","fontWeight","as","Button","colorScheme","rightIcon","ChevronDown","i","val","Add","content","isRound","size","onDragEnd","droppableId","droppableProps","spacing","padding","minHeight","Home","props","useState","titleVal","setTitleVal","descVal","setDescVal","groupList","setGroupList","useEffect","curNode","descriptionVal","htmlFor","name","onChange","e","target","removeGroup","createNewGroup","nextNode","result","destination","items","splice","source","reorderedItem","updateGroupOrder","newGroup","fieldComponents","GroupPage","rootNode","labelVal","setLabelVal","fieldList","setFieldList","subGroup","setSubGroup","subField","setSubField","gFields","gSubGroups","removeField","removeSubGroup","removeSubField","subFieldArr","creatNewField","createNewSubGroup","creatNewSubField","console","log","curList","updateFieldOrder","updateSubGroupOrder","updateSubFieldOrder","gItem","updateGroupItem","updateSubGroupItem","onUpdateLabel","getSubGroupData","getSubFieldData","selectTypes","TextInput","React","forwardRef","OptionForm","firstFieldRef","onCancel","handleSubmit","optionData","setLabel","setValue","sel","setSel","variant","FormListItem","useDisclosure","onOpen","onClose","isOpen","useRef","initialFocusRef","placement","closeOnBlur","p","returnFocus","persistentFocus","DynamicFormList","placeholderReqTypes","patternReqTypes","lengthReqTypes","FieldPage","typeVal","setTypeVal","requiredVal","setRequiredVal","placeholderVal","setPlaceholderVal","checkedVal","setCheckVal","patternVal","setPatternVal","minLengthVal","setMinLengthVal","maxLengthVal","setMaxLengthVal","optionsVal","setOptionsVal","updateFieldItem","updateSubFieldItem","onSetLabelVal","includes","onSetMinLengthVal","onSetMaxLengthVal","updatedOpt","removeOption","addOption","updateOption","variants","enter","x","zIndex","center","exit","pageTransition","stiffness","damping","duration","pageStyle","gridRow","gridColumn","StoreWrapper","page","setPage","setRootNode","setCurNode","initSetUp","onMessageReceivedFromIframe","useCallback","event","formData","updateRoot","window","addEventListener","removeEventListener","position","ChevronLeft","mx","transition","getStoreData","JSON","stringify","postMessage","AnimatePresence","initial","motion","div","style","animate","App","resetCSS","className","maxW","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.739f6f05.chunk.js","sourcesContent":["import { FieldNodeObj, GroupNodeObj } from \"./store\";\nimport { GroupDataObj, FieldDataObj } from \"../interface/store\"\n\nexport const uuID = (): string => Math.random().toString(36).substr(2, 9);\n\nexport const getGroupDataObj = (obj: GroupNodeObj): GroupDataObj => Object.keys(obj)\n  .reduce((acc, cur) => {\n    acc[cur] = obj[cur].getGroupData()\n    return acc\n  }, {})\n\nexport const getFieldDataObj = (obj: FieldNodeObj): FieldDataObj => Object.keys(obj)\n  .reduce((acc, cur) => {\n    acc[cur] = obj[cur].getFieldData()\n    return acc\n  }, {})","import { Group, Option, FieldType, Field } from '../interface/store'\nimport { FormFieldInput, createField, createGroup, GroupNodeObj, convertToNodeObj, FieldNodeObj, removeNode } from './store'\nimport { FormGroup } from './formGroup'\nimport { uuID, getGroupDataObj, getFieldDataObj } from './helpers'\n\nexport class FieldNode {\n  title: string;\n  type: FieldType;\n  required: boolean;\n  placeholder: string;\n  checked: boolean;\n  pattern: string;\n  minLength: string;\n  maxLength: string;\n  options: Option[];\n  private _id: string;\n  private _subGroups: Group[];\n  private _subGroupsData: GroupNodeObj;\n  private _subFields: Group[];\n  private _subFieldsData: FieldNodeObj;\n  private _parent: FormGroup | FieldNode | null;\n  private _position: 'field' =  'field';\n  private _fieldType: 'field' | 'subField';\n\n  constructor(prop: FormFieldInput) {\n    this._id = prop.id || uuID();\n    this.title = prop.title || `Field ${this._id}`;\n    this.type = prop.type || '';\n    this.required = !!(prop.required);\n    this.placeholder = prop.placeholder;\n    this.checked = prop.checked\n    this.pattern = prop.pattern;\n    this.minLength = prop.maxLength;\n    this.maxLength = prop.maxLength;\n    this.options = prop.options || [];\n    this._subGroups = prop.subGroups || [];\n    this._subGroupsData = convertToNodeObj(prop.subGroupsData, FormGroup, this) as GroupNodeObj;\n    this._subFields = prop.subFields || [];\n    this._subFieldsData = convertToNodeObj(prop.subFieldsData, FieldNode, this) as FieldNodeObj;\n    this._parent = prop.parent || null;\n    this._fieldType = prop.fieldType;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get subGroups() {\n    return this._subGroups\n  }\n\n  get subGroupsData() {\n    return this._subGroupsData;\n  }\n\n  get subFields() {\n    return this._subFields;\n  }\n\n  get subFieldsData() {\n    return this._subFieldsData;\n  }\n\n  get parent() {\n    return this._parent;\n  }\n\n  get position(): 'field' {\n    return this._position;\n  }\n\n  get fieldType() : 'field' | 'subField' {\n    return this._fieldType;\n  }\n\n  getFieldData(): Field {\n    return {\n      id: this._id,\n      title: this.title,\n      type: this.type,\n      required: this.required,\n      placeholder: this.placeholder,\n      checked: this.checked,\n      pattern: this.pattern,\n      minLength: this.minLength,\n      maxLength: this.maxLength,\n      options: this.options,\n      subGroups: this._subGroups,\n      subGroupsData: getGroupDataObj(this._subGroupsData),\n      subFields: this._subFields,\n      subFieldsData: getFieldDataObj(this._subFieldsData)\n    }\n  }\n\n  getSubGroupData(id: string) {\n    return this._subGroupsData[id] || null;\n  }\n\n  getSubFieldData(id: string) {\n    return this._subFieldsData[id] || null;\n  }\n\n  createNewSubGroup() {\n    const [ indObj, groupNode ] = createGroup(this, 'subGroup');\n    this._subGroups = [...this._subGroups, indObj as Group];\n    this._subGroupsData[(groupNode as FormGroup).id] = groupNode as FormGroup;\n    return [this._subGroups, this._subGroupsData];\n  }\n\n  removeSubGroup(id: string) {\n    const [filteredGroup, cleanData] = removeNode(id, this.subGroups, this.subGroupsData);\n    this._subGroups = filteredGroup as Group[];\n    this._subGroupsData = cleanData as GroupNodeObj;\n    return [this._subGroups, this._subGroupsData];\n  }\n\n  creatNewSubField() {\n    const [ indObj, fieldNode ] = createField(this, 'subField');\n    this._subFields = [...this._subFields, indObj as Group];\n    this._subFieldsData[(fieldNode as FieldNode).id] = fieldNode as FieldNode;\n    return [this._subFields, this._subFieldsData];\n  }\n\n  removeSubField(id: string) {\n    const [filteredGroup, cleanData] = removeNode(id, this._subFields, this._subFieldsData);\n    this._subFields = filteredGroup as Group[];\n    this._subFieldsData = cleanData as FieldNodeObj;\n    return [this._subFields, this._subFieldsData];\n  }\n\n  addOption() {\n    this.options = [...this.options, {\n      id: uuID(),\n      value: '',\n      label: '',\n      selected: false\n    }];\n    return this.options;\n  }\n\n  removeOption(id: string) {\n    this.options = this.options.filter(v => v.id !== id);\n    return this.options;\n  }\n\n  updateOption(opt: Option) {\n    this.options = this.options.map(v => {\n      if (v.id === opt.id) {\n        return opt;\n      }\n      return v;\n    })\n    return this.options;\n  }\n\n  updateSubFieldOrder(list: Group[]) {\n    this._subFields = list;\n    list.forEach(item => {\n      if (!(item.key in this._subFieldsData)) {\n        this._subFieldsData[item.key] = new FieldNode({ \n          id: item.key,\n          title:  `Field ${item.key}`,\n          parent: this,\n          fieldType: 'subField' })\n      }\n    })\n    return [this._subFields, this._subFieldsData];\n  }\n\n  updateSubGroupOrder(list: Group[]) {\n    this._subGroups = list;\n    list.forEach(item => {\n      if (!(item.key in this._subGroupsData)) {\n        this._subGroupsData[item.key] = new FormGroup({ \n          id: item.key,\n          label:  `Group ${item.key}`,\n          parent: this,\n          groupType: 'subGroup' })\n      }\n    })\n    return [this.subGroups, this._subGroupsData];\n  }\n\n  updateSubGroupItem(item: Group) {\n    this._subGroups = this.subGroups.map(obj => {\n      return obj.key === item.key ? item : obj\n    })\n    return this._subGroups;\n  }\n\n  updateSubFieldItem(item: Group) {\n    this._subFields = this._subFields.map(obj => {\n      return obj.key === item.key ? item : obj\n    })\n    return this._subFields;\n  }\n\n}","import { Group, GroupData } from '../interface/store'\nimport { \n  Root, \n  GroupNodeObj,\n  FormGroupInput,\n  createField,\n  convertToNodeObj, createGroup, FieldNodeObj, removeNode } from './store'\nimport { FieldNode } from './fieldNode'\nimport { uuID, getGroupDataObj, getFieldDataObj } from './helpers'\n\nexport class FormGroup {\n  private _id: string;\n  label: string;\n  private _groupType: 'group' | 'subGroup'; \n  private fields: Group[];\n  private fieldsData: FieldNodeObj;\n  private subGroups: Group[];\n  private subGroupsData: GroupNodeObj;\n  private subFields: Group[];\n  private subFieldsData: FieldNodeObj;\n  private _parent: Root | FormGroup | FieldNode | null;\n  private _position: 'group' = 'group';\n\n  constructor(input: FormGroupInput) {\n    this._id = input.id || uuID();\n    this.label = input.label || `Group ${this._id}`;\n    this.fields = input.fields || [];\n    this.fieldsData = convertToNodeObj(input.fieldsData, FieldNode, this) as FieldNodeObj;\n    this.subGroups = input.subGroups || [];\n    this.subGroupsData = convertToNodeObj(input.subGroupsData, FormGroup, this) as GroupNodeObj;\n    this.subFields = input.subFields || [];\n    this.subFieldsData = convertToNodeObj(input.subFieldsData, FieldNode, this) as FieldNodeObj;\n    this._parent = input.parent || null;\n    this._groupType = input.groupType;\n  }\n\n  get id(): string {\n    return this._id;\n  }\n\n  get gFields(): Group[] {\n    return this.fields;\n  };\n\n  get gSubGroups(): Group[] {\n    return this.subGroups;\n  }\n\n  get gSubFields() {\n    return this.subFields;\n  }\n\n  get parent(): Root | FormGroup | FieldNode | null {\n    return this._parent;\n  }\n\n  get position(): 'group' {\n    return this._position;\n  }\n\n  get groupType(): 'group' | 'subGroup' {\n    return this._groupType; \n  }\n\n  getGroupData(): GroupData {\n    return {\n      id: this.id,\n      label: this.label,\n      fields: this.fields,\n      fieldsData: getFieldDataObj(this.fieldsData),\n      subGroups: this.subGroups,\n      subGroupsData: getGroupDataObj(this.subGroupsData),\n      subFields: this.gSubFields,\n      subFieldsData: getFieldDataObj(this.subFieldsData)\n    }\n  }\n\n  getSubGroupData(id: string) {\n    return this.subGroupsData[id] || null;\n  }\n\n  getFieldData(id: string) {\n    return this.fieldsData[id] || null;\n  }\n\n  getSubFieldData(id: string) {\n    return this.subFieldsData[id] || null;\n  }\n\n  createNewSubGroup() {\n    const [ indObj, groupNode ] = createGroup(this, 'subGroup');\n    this.subGroups = [...this.subGroups, indObj as Group];\n    this.subGroupsData[(groupNode as FormGroup).id] = groupNode as FormGroup;\n    return [this.subGroups, this.subGroupsData];\n  }\n\n  removeSubGroup(id: string) {\n    const [filteredGroup, cleanData] = removeNode(id, this.subGroups, this.subGroupsData);\n    this.subGroups = filteredGroup as Group[];\n    this.subGroupsData = cleanData as GroupNodeObj;\n    return [this.subGroups, this.subGroupsData]\n  }\n\n  creatNewField() {\n    const [ indObj, fieldNode ] = createField(this, 'field');\n    this.fields = [...this.fields, indObj as Group];\n    this.fieldsData[(fieldNode as FieldNode).id] = fieldNode as FieldNode;\n    return [this.fields, this.fieldsData];\n  }\n\n  removeField(id: string) {\n    const [filteredGroup, cleanData] = removeNode(id, this.fields, this.fieldsData);\n    this.fields = filteredGroup as Group[];\n    this.fieldsData = cleanData as FieldNodeObj;\n    return [this.fields, this.fieldsData];\n  }\n\n  creatNewSubField() {\n    const [ indObj, fieldNode ] = createField(this, 'subField');\n    this.subFields = [ ...this.subFields, indObj as Group];\n    this.subFieldsData[(fieldNode as FieldNode).id] = fieldNode as FieldNode;\n    return [this.subFields, this.subFieldsData]\n  }\n\n  removeSubField(id: string) {\n    const [filteredGroup, cleanData] = removeNode(id, this.subFields, this.subFieldsData);\n    this.subFields = filteredGroup as Group[];\n    this.subFieldsData = cleanData as FieldNodeObj;\n    return [this.subFields, this.subFieldsData]\n  }\n\n  updateSubGroupOrder(list: Group[]) {\n    this.subGroups = list;\n    list.forEach(item => {\n      if (!(item.key in this.subGroupsData)) {\n        this.subGroupsData[item.key] = new FormGroup({ \n          id: item.key,\n          label:  `Group ${item.key}`,\n          parent: this,\n          groupType: 'subGroup'})\n      }\n    })\n    return [this.subGroups, this.subGroupsData];\n  }\n\n  updateSubFieldOrder(list: Group[]) {\n    this.subFields = list;\n    list.forEach(item => {\n      if (!(item.key in this.subFieldsData)) {\n        this.subFieldsData[item.key] = new FieldNode({ \n          id: item.key,\n          title:  `Field ${item.key}`,\n          parent: this,\n          fieldType: 'subField' })\n      }\n    })\n    return [this.subFields, this.subFieldsData];\n  }\n\n  updateFieldOrder(list: Group[]) {\n    this.fields = list;\n    list.forEach(item => {\n      if (!(item.key in this.fieldsData)) {\n        this.fieldsData[item.key] = new FieldNode({ \n          id: item.key,\n          title:  `Field ${item.key}`,\n          parent: this,\n          fieldType: 'field' })\n      }\n    })\n    return [this.fields, this.fieldsData];\n  }\n\n  updateSubGroupItem(item: Group) {\n    this.subGroups = this.subGroups.map(obj => {\n      return obj.key === item.key ? item : obj\n    })\n    return this.subGroups;\n  }\n\n  updateFieldItem(item: Group) {\n    this.fields = this.fields.map(obj => {\n      return obj.key === item.key ? item : obj\n    })\n    return this.fields;\n  }\n\n  updateSubFieldItem(item: Group) {\n    this.subFields = this.subFields.map(obj => {\n      return obj.key === item.key ? item : obj\n    })\n    return this.subFields;\n  }\n\n}","import { Store, GroupDataObj, GroupData, Group, Field, FieldDataObj } from '../interface/store'\nimport { FormGroup } from './formGroup'\nimport { FieldNode } from './fieldNode'\nimport { uuID } from './helpers';\n\ninterface Constructable<T> {\n  new(...args: any) : T;\n}\n\nexport interface FormGroupInput extends Partial<GroupData> {\n  parent: Root | FormGroup | FieldNode | null;\n  groupType: 'group' | 'subGroup';\n}\n\nexport interface FormFieldInput extends Partial<Field> {\n  parent: FormGroup | FieldNode | null;\n  fieldType: 'field' | 'subField';\n}\n\nexport interface GroupNodeObj {\n  [key: string]: FormGroup;\n}\n\nexport interface FieldNodeObj {\n  [key: string]: FieldNode;\n}\n\nexport function convertToNodeObj(\n  obj: GroupDataObj | FieldDataObj,\n  nodeClass: Constructable<FormGroup| FieldNode>,\n  parent: Root | FormGroup | FieldNode): GroupNodeObj | FieldNodeObj {\n  let data = {};\n\n  for (const key in obj) {\n    data[key] = new nodeClass({ ...obj[key], parent})\n  }\n\n  return data;\n}\n\nexport function removeNode(\n  id: string,\n  groupArr: Group[],\n  dataObj: { [key: string]: unknown}) {\n    const filteredGroup = groupArr.filter(v => v.key !== id);\n    const cleanData = Object.keys(dataObj).reduce((acc, cur) => {\n      if (cur !== id) {\n        acc[cur] = dataObj[cur]\n      }\n      return acc;\n    }, {} as { [key: string]: unknown});\n    return [filteredGroup, cleanData];\n}\n\nexport function createGroup(\n  parent: Root | FormGroup | FieldNode,\n  groupType: 'group' | 'subGroup',\n  obj?: GroupData) {\n    const node = new FormGroup({...obj, parent, groupType})\n    \n    const group: Group = {\n      key: node.id,\n      label: node.label\n    }\n    \n    return [group, node];\n}\n\nexport function createField(\n  parent: FormGroup | FieldNode,\n  fieldType: 'field' | 'subField',\n  obj?: Field) {\n  const node = new FieldNode({...obj, parent, fieldType }) \n  \n  const group: Group = {\n    key: node.id,\n    label: node.title\n  }\n  \n  return [group, node];\n}\n\nexport class Root {\n  id: string = 'onlyRoot'\n  private title: string;\n  private description: string;\n  private group: Group[];\n  private groupData: GroupNodeObj;\n  private _position: 'root' = 'root';\n\n  constructor(\n    { title = '', \n    description = '',\n    group = [],\n    groupData = {}}: Store) {\n    this.id = uuID();\n    this.title = title;\n    this.description = description;\n    this.group = group;\n    this.groupData = convertToNodeObj(groupData, FormGroup, this) as GroupNodeObj;\n  }\n\n  get titleVal(): string {\n    return this.title\n  }\n\n  get descriptionVal(): string {\n    return this.description;\n  }\n\n  get groupList(): Group[] {\n    return this.group;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set titleVal(str: string) {\n    this.title = str;\n  }\n\n  set descriptionVal(str: string) {\n    this.description = str;\n  }\n\n  getStoreData(): Store {\n    return {\n      title: this.title,\n      description: this.description,\n      group: this.group,\n      groupData: Object.keys(this.groupData)\n        .reduce((acc, cur) => {\n          acc[cur] = this.groupData[cur].getGroupData()\n          return acc\n        }, {})\n    }\n  }\n\n  getGroupData(id: string) {\n    return this.groupData[id] || null;\n  }\n\n  createNewGroup() {\n    const [ indObj, groupNode ] = createGroup(this, 'group');\n    this.group = [...this.group, indObj as Group];\n    this.groupData[(groupNode as FormGroup).id] = groupNode as FormGroup;\n    return [this.group, this.groupData];\n  }\n\n  removeGroup(id: string) {\n    const [filteredGroup, cleanData] = removeNode(id, this.group, this.groupData);\n    this.group = filteredGroup as Group[];\n    this.groupData = cleanData as GroupNodeObj;\n    return [this.group, this.groupData];\n  }\n\n  updateGroupItem(item: Group) {\n    this.group = this.group.map(obj => {\n      return obj.key === item.key ? item : obj\n    })\n    return this.group;\n  }\n\n  updateGroupOrder(list: Group[]) {\n    this.group = list;\n    list.forEach(item => {\n      if (!(item.key in this.groupData)) {\n        this.groupData[item.key] = new FormGroup({ \n          id: item.key,\n          label:  `Group ${item.key}`,\n          parent: this,\n          groupType: 'group' })\n      }\n    })\n    return [this.group, this.groupData];\n  }\n\n  updateRoot(\n    { title = '', \n    description = '',\n    group = [],\n    groupData = {}}: Store) {\n    this.id = uuID();\n    this.title = title;\n    this.description = description;\n    this.group = group;\n    this.groupData = convertToNodeObj(groupData, FormGroup, this) as GroupNodeObj;\n    return this;\n  }\n\n}\n\n","import React from 'react'\nimport {\n  Link,\n  IconButton,\n  Flex,\n} from \"@chakra-ui/react\"\nimport { UpDownIcon, DeleteIcon } from \"@chakra-ui/icons\"\nimport { DraggableProvided, Draggable } from \"react-beautiful-dnd\";\n\n\ninterface Props {   \n    id: string;\n    index: number;\n    label: string;\n    onDelete: (id: string) => void,\n    onGoToGroup: (id: string) => void,\n}\n\nconst ListItem = ({ id, index, label, onGoToGroup, onDelete }: Props) => (\n    <Draggable draggableId={id} index={index}>\n        {(provided: DraggableProvided) => (\n            <Flex \n                {...provided.dragHandleProps}\n                {...provided.draggableProps}\n                ref={provided.innerRef}\n                background=\"white\"\n                border=\"1px solid\"\n                borderColor=\"gray.200\"\n                borderRadius=\"6\"\n                w=\"100%\">\n                <Link flex=\"1\"\n                    alignItems=\"center\"\n                    d=\"flex\"\n                    onClick={() => onGoToGroup(id)}\n                    _hover={{\n                        color: \"blue\",\n                    }}\n                    justifyContent=\"flex-start\">\n                     <UpDownIcon  color=\"gray.300\" w=\"10\" /> {label}\n                </Link>\n                <IconButton \n                    onClick={() => onDelete(id)}\n                    background=\"white\"\n                    aria-label=\"Remove item\"\n                    _hover={{\n                        background: \"red\",\n                    }}\n                    icon={<DeleteIcon />} />\n            </Flex>\n        )}\n    </Draggable>\n\n)\n\nexport default ListItem","import React from 'react'\nimport { \n    Text,\n    Box,\n    Stack,\n    Flex,\n    IconButton,\n    Menu,\n    MenuButton,\n    MenuList,\n    MenuItem,\n    Button\n  } from \"@chakra-ui/react\"\nimport { ChevronDownIcon, AddIcon } from \"@chakra-ui/icons\"\nimport ListItem from \"./ListItem\"\nimport { DragDropContext, Droppable,  DroppableProvided, DropResult } from \"react-beautiful-dnd\";\nimport { uuID } from '../scripts/helpers';\n\ninterface Props {\n    label: string;\n    value: GroupItem[];\n    onDelete: (id: string) => void;\n    onAdd: (id?: string) => void;\n    handleOnDragEnd: (result: DropResult) => void;\n    components?: ComponentOption[];\n    onGoToGroup: (id: string) => void;\n}\n\nexport interface ComponentOption {\n    val: string;\n    content: string;\n}\n\ninterface GroupItem {\n    key: string;\n    label: string;\n}\n\nconst DynamicList = ({ \n    label,\n    value = [],\n    onDelete,\n    onAdd,\n    handleOnDragEnd,\n    components,\n    onGoToGroup\n}: Props) => {\n\n    return (\n    <Box>\n        <Flex justifyContent=\"space-between\" \n            alignItems=\"center\" \n            mb={2}>\n            <Text fontWeight=\"semibold\">{label}</Text>\n            {components ? \n                <Menu>\n                    <MenuButton as={Button} colorScheme=\"teal\" rightIcon={<ChevronDownIcon />}>\n                        Component\n                    </MenuButton>\n                    <MenuList>\n                        {components.map((v, i)=> (\n                            <MenuItem\n                                key={`${v}${i}`}\n                                onClick={() => onAdd(v.val)}\n                                icon={<AddIcon />}\n                                >\n                                {v.content}\n                            </MenuItem>))}\n                    </MenuList>\n                </Menu> :\n                <IconButton aria-label=\"Add Group\" \n                    isRound={true} \n                    colorScheme=\"teal\"\n                    size=\"sm\"\n                    icon={<AddIcon />} \n                    onClick={() => onAdd()} />\n            }\n        </Flex>\n        <DragDropContext onDragEnd={handleOnDragEnd}>\n            <Droppable droppableId={`droppable-${uuID()}`}>\n                {(provided: DroppableProvided) => ( \n                    <Stack as=\"ol\" \n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        spacing=\"1.5\"\n                        border=\"1px dashed\"\n                        borderColor=\"gray.200\"\n                        padding=\"2\"\n                        minHeight=\"24\">             \n                        {value.map((v, i) => ( \n                            <ListItem\n                                key={v.key}\n                                id={v.key}\n                                index={i}\n                                onDelete={onDelete}\n                                onGoToGroup={onGoToGroup}\n                                label={v.label} />\n                        ))}\n                        {provided.placeholder}\n                    </Stack>\n                )}\n            </Droppable>\n        </DragDropContext>\n\n    </Box>)\n}\n\nexport default DynamicList","import React, { useState, useEffect } from 'react';\nimport { \n  Heading,\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n  Textarea\n} from \"@chakra-ui/react\"\nimport DynamicList from './DynamicList'\nimport { Root } from '../scripts/store'\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { Group } from '../interface/store'\nimport { FormGroup } from '../scripts/formGroup';\n\ninterface Props {\n  rootNode: Root;\n  curNode: Root;\n  nextNode: (node: Root | FormGroup) => void;\n};\n\nconst Home = (props: Props) => {\n  const [ titleVal, setTitleVal ] = useState(null)\n  const [ descVal,  setDescVal ] = useState(null)\n  const [ groupList, setGroupList ] = useState([])\n\n  // did mount\n  useEffect(() => {\n    if (props.curNode \n        && titleVal === null \n        && descVal === null) {\n      setTitleVal(props.curNode.titleVal)\n      setDescVal(props.curNode.descriptionVal)\n      setGroupList(props.curNode.groupList)\n    }\n  }, [props, titleVal, descVal])\n\n  const onUpdateTitle = (val: string) => {\n    props.curNode.titleVal = val\n    setTitleVal(props.curNode.titleVal)\n  }\n\n  const onUpdateDesc = (val: string) => {\n    props.curNode.descriptionVal = val\n    setDescVal(props.curNode.descriptionVal)\n  }\n\n  const onDelete = (id: string) => {\n    const [ group ] = props.curNode.removeGroup(id);\n    setGroupList(group as Group[])\n  }\n\n  const onAdd = () => {\n    const [ group ] = props.curNode.createNewGroup();\n    setGroupList(group as Group[])\n  }\n\n  const handleOnDragEnd = (result: DropResult) => {\n    if (!result.destination) return\n    const items = [...groupList]\n    const [reorderedItem] = items.splice(result.source.index, 1)\n    items.splice(result.destination.index, 0, reorderedItem)\n    const [newGroup] = props.curNode.updateGroupOrder(items)\n    setGroupList(newGroup as Group[])\n  }\n\n  const onGoToGroup = (id: string) => {\n    const node: FormGroup = props.curNode.getGroupData(id)\n    props.nextNode(node);\n  }\n\n  return (\n  <Stack as=\"main\" spacing={6}>\n    <Heading as=\"h1\">\n        Form Builder\n    </Heading>\n    <Stack as=\"form\" spacing={6}>\n        <FormControl>\n            <FormLabel htmlFor=\"title\">Title</FormLabel>\n            <Input name=\"title\" \n                value={titleVal || ''}\n                onChange={(e) => onUpdateTitle(e.target.value)}\n                placeholder=\"Form Title\"\n            />\n        </FormControl>\n        <FormControl>\n            <FormLabel htmlFor=\"description\">Description</FormLabel>\n            <Textarea name=\"description\"\n                value={descVal || ''}\n                placeholder=\"Details about the form\"\n                onChange={(e) => onUpdateDesc(e.target.value)}\n            />\n        </FormControl>\n        <DynamicList \n            label=\"Groups\"\n            value={groupList}\n            onDelete={onDelete}\n            onAdd={onAdd}\n            onGoToGroup={onGoToGroup}\n            handleOnDragEnd={handleOnDragEnd} />\n    </Stack>\n  </Stack>)\n}\n\nexport default Home;","import React, { useState, useEffect } from 'react'\nimport { \n  Heading,\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n} from \"@chakra-ui/react\"\nimport DynamicList, { ComponentOption } from './DynamicList'\nimport { DropResult } from \"react-beautiful-dnd\";\nimport { FormGroup } from '../scripts/formGroup'\nimport { Root } from '../scripts/store'\nimport { Group } from '../interface/store'\nimport { FieldNode } from '../scripts/fieldNode';\n\ninterface Props {\n  rootNode: Root;\n  curNode: FormGroup;\n  nextNode: (node: Root | FormGroup | FieldNode) => void;\n};\n\ntype ListType = 'field' | 'subG' | 'subF';\n\nconst fieldComponents: ComponentOption[] = [\n  {\n    val: 'customField',\n    content: 'Custom'\n  },\n  {\n    val: 'customField',\n    content: 'Custom Long Name Here Boy'\n  }\n]\n\nconst GroupPage = ({ rootNode, curNode, nextNode }: Props) => {\n  const [labelVal, setLabelVal] = useState(null)\n  const [fieldList, setFieldList] = useState<Group[]>([])\n  const [subGroup, setSubGroup] = useState<Group[]>([])\n  const [subField, setSubField] = useState<Group[]>([])\n\n  // did mount\n  useEffect(() => {\n    if (curNode \n        && labelVal === null ) {\n      setLabelVal(curNode.label)\n      setFieldList(curNode.gFields)\n      setSubGroup(curNode.gSubGroups)\n      setSubField(curNode.gSubFields)\n    }\n  }, [curNode, labelVal, rootNode])\n\n  const onUpdateLabel = (val: string) => {\n    curNode.label = val;\n    setLabelVal(curNode.label);\n  \n    const gItem = {\n      key: curNode.id,\n      label: curNode.label\n    }\n    if (curNode.groupType === 'group') {\n      (curNode.parent as Root).updateGroupItem(gItem)\n    } else if (curNode.groupType === 'subGroup') {\n      (curNode.parent as FormGroup | FieldNode).updateSubGroupItem(gItem)\n    }\n  }\n\n  const onDelete = (id: string, type: ListType) => {\n    switch (type) {\n      case 'field':\n        const [fields] = curNode.removeField(id)\n        setFieldList(fields as Group[])\n        break;\n      case 'subG':\n        const [group] = curNode.removeSubGroup(id)\n        setSubGroup(group as Group[])\n        break;\n      case 'subF':\n        const [subFieldArr] = curNode.removeSubField(id)\n        setSubField(subFieldArr as Group[])\n        break;\n    }\n  }\n\n  const onAdd = (type: ListType, id?: string) => {\n    switch (type) {\n      case 'field':\n        const [fields] = curNode.creatNewField()\n        setFieldList(fields as Group[])\n        break;\n      case 'subG':\n        const [group] = curNode.createNewSubGroup()\n        setSubGroup(group as Group[])\n        break;\n      case 'subF':\n        const [subFieldArr] = curNode.creatNewSubField()\n        setSubField(subFieldArr as Group[])\n        break;\n    }\n    console.log({ rootNode, curNode})\n  }\n\n  const handleOnDragEnd = (result: DropResult, type: ListType, curList: Group[]) => {\n    if (!result.destination) return\n    const items = [...curList]\n    const [reorderedItem] = items.splice(result.source.index, 1)\n    items.splice(result.destination.index, 0, reorderedItem)\n\n    switch (type) {\n      case 'field':\n        const [fields] = curNode.updateFieldOrder(items)\n        setFieldList(fields as Group[])\n        break;\n      case 'subG':\n        const [group] = curNode.updateSubGroupOrder(items)\n        setSubGroup(group as Group[])\n        break;\n      case 'subF':\n        const [subFieldArr] = curNode.updateSubFieldOrder(items)\n        setSubField(subFieldArr as Group[])\n        break;\n    }\n  }\n\n  const onGoToSubGroup = (id: string) => {\n    const node: FormGroup = curNode.getSubGroupData(id)\n    nextNode(node);\n  }\n\n  const onGoToField = (id: string) => {\n    const node: FieldNode = curNode.getFieldData(id)\n    nextNode(node);\n  }\n\n  const onGoToSubField = (id: string) => {\n    const node: FieldNode = curNode.getSubFieldData(id)\n    nextNode(node);\n  }\n\n  return (\n  <Stack as=\"main\" spacing={6}>\n    <Heading as=\"h1\">\n        Group\n    </Heading>\n    <Stack as=\"form\" spacing={6}>\n        <FormControl>\n            <FormLabel htmlFor=\"title\">Title</FormLabel>\n            <Input name=\"Label\" \n                value={labelVal || ''}\n                onChange={(e) => onUpdateLabel(e.target.value)}\n                placeholder=\"Form Title\"\n            />\n        </FormControl>\n        <DynamicList \n            label=\"Fields\"\n            value={fieldList}\n            components={fieldComponents}\n            onDelete={(id: string) => onDelete(id, 'field')}\n            onAdd={(id) => onAdd('field', id)}\n            onGoToGroup={onGoToField}\n            handleOnDragEnd={(v: DropResult) => handleOnDragEnd(v, 'field', fieldList)} />\n        <DynamicList \n            label=\"Sub Groups\"\n            value={subGroup}\n            onDelete={(id: string) => onDelete(id, 'subG')}\n            onAdd={() => onAdd('subG')}\n            onGoToGroup={onGoToSubGroup}\n            handleOnDragEnd={(v: DropResult) => handleOnDragEnd(v, 'subG', subGroup)} />\n        <DynamicList \n            label=\"Sub Fields\"\n            value={subField}\n            components={fieldComponents}\n            onDelete={(id: string) => onDelete(id, 'subF')}\n            onAdd={(id) => onAdd('subF', id)}\n            onGoToGroup={onGoToSubField}\n            handleOnDragEnd={(v: DropResult) => handleOnDragEnd(v, 'subF', subField)} />\n    </Stack>\n  </Stack>)\n}\n\nexport default GroupPage","interface SelectType {\n  label: string;\n  value: string;\n}\n\nexport const selectTypes: SelectType[] = [\n  {\n    label: 'Check Box',\n    value: 'checkbox'\n  },\n  {\n    label: 'Text',\n    value: 'text'\n  },\n  {\n    label: 'Textarea',\n    value: 'textarea'\n  },\n  {\n    label: 'Tel',\n    value: 'tel'\n  },\n  {\n    label: 'Email',\n    value: 'email'\n  },\n  {\n    label: 'Select',\n    value: 'select'\n  }\n]","import React from 'react'\nimport { \n  FormControl,\n  FormLabel,\n  Input\n} from \"@chakra-ui/react\"\n\ninterface Props {\n  id: string;\n  label: string;\n  [key: string]: unknown;\n}\n\nconst TextInput = React.forwardRef((props: Props, ref: React.LegacyRef<HTMLInputElement>) => {\n  return (\n    <FormControl>\n      <FormLabel htmlFor={props.id}>{props.label}</FormLabel>\n      <Input ref={ref} id={props.id} {...props} />\n    </FormControl>\n  )\n})\n\nexport default TextInput","import React, { useState } from 'react'\nimport { \n  Stack,\n  ButtonGroup,\n  Button,\n  FormControl,\n  Checkbox\n} from \"@chakra-ui/react\"\nimport TextInput from './TextInput'\nimport { Option } from '../interface/store'\n\ninterface Props {\n  firstFieldRef: React.Ref<HTMLInputElement>,\n  onCancel: () => void;\n  handleSubmit: (e: Option) => void;\n  optionData: Option;\n}\n\nconst OptionForm = ({ firstFieldRef, onCancel, handleSubmit, optionData }: Props) => {\n  const [label, setLabel] = useState<string>(optionData.label);\n  const [value, setValue] = useState<string>(optionData.value);\n  const [sel, setSel] = useState<boolean>(optionData.selected);\n\n  return (\n      <Stack spacing={4}>\n        <TextInput\n          label=\"Label\"\n          id=\"label\"\n          ref={firstFieldRef}\n          placeholder=\"Option Label\"\n          value={label}\n          onChange={(e) => setLabel(e.target.value)}\n          required\n        />\n        <TextInput \n          label=\"Value\" \n          id=\"value\" \n          placeholder=\"Option Value\" \n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          required />\n        <FormControl>\n          <Checkbox \n             onChange={(e) => setSel(e.target.checked)}\n             checked={sel}>\n            Selected\n          </Checkbox>\n        </FormControl>\n        <ButtonGroup d=\"flex\" justifyContent=\"flex-end\">\n          <Button variant=\"outline\" onClick={onCancel}>\n            Cancel\n          </Button>\n          <Button onClick={() => handleSubmit({\n            id: optionData.id,\n            label,\n            value,\n            selected: sel\n          })} colorScheme=\"teal\">\n            Submit\n          </Button>\n        </ButtonGroup>\n      </Stack>\n  )\n}\n\nexport default OptionForm","import React from 'react'\nimport {\n  Link,\n  IconButton,\n  Flex,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  PopoverArrow,\n  PopoverCloseButton,\n  useDisclosure\n} from \"@chakra-ui/react\"\nimport { UpDownIcon, DeleteIcon } from \"@chakra-ui/icons\"\nimport { DraggableProvided, Draggable } from \"react-beautiful-dnd\"\nimport OptionForm from './OptionForm'\nimport FocusLock from 'react-focus-lock'\nimport { Option } from '../interface/store'\n\ninterface Props {   \n    id: string;\n    index: number;\n    label: string;\n    onDelete: (id: string) => void;\n    handleSubmit: (e) => void;\n    optionData: Option;\n}\n\nconst FormListItem = ({ id, index, label, handleSubmit, onDelete, optionData }: Props) => {\n  const { onOpen, onClose, isOpen } = useDisclosure()\n  const firstFieldRef = React.useRef(null)\n  \n  return (\n    <Draggable draggableId={id} index={index}>\n        {(provided: DraggableProvided) => (\n            <Flex \n                {...provided.dragHandleProps}\n                {...provided.draggableProps}\n                ref={provided.innerRef}\n                background=\"white\"\n                border=\"1px solid\"\n                borderColor=\"gray.200\"\n                borderRadius=\"6\"\n                w=\"100%\">\n                  <Popover\n                    isOpen={isOpen}\n                    initialFocusRef={firstFieldRef}\n                    onOpen={onOpen}\n                    onClose={onClose}\n                    placement=\"bottom\"\n                    closeOnBlur={false}>\n                      <PopoverTrigger>\n                        <Link flex=\"1\"\n                            alignItems=\"center\"\n                            d=\"flex\"\n                            _hover={{\n                                color: \"blue\",\n                            }}\n                            justifyContent=\"flex-start\">\n                            <UpDownIcon  color=\"gray.300\" w=\"10\" /> {label}\n                        </Link>\n                      </PopoverTrigger>\n                      <PopoverContent p={5}>\n                        <FocusLock returnFocus persistentFocus={false}>\n                          <PopoverArrow />\n                          <PopoverCloseButton />\n                          <OptionForm\n                            optionData={optionData}\n                            firstFieldRef={firstFieldRef}\n                            handleSubmit={handleSubmit}\n                            onCancel={onClose} />\n                        </FocusLock>\n                      </PopoverContent>\n                  </Popover>\n                \n                <IconButton \n                    onClick={() => onDelete(id)}\n                    background=\"white\"\n                    aria-label=\"Remove item\"\n                    _hover={{\n                        background: \"red\",\n                    }}\n                    icon={<DeleteIcon />} />\n            </Flex>\n        )}\n    </Draggable>\n\n)}\n\nexport default FormListItem","import React from 'react'\nimport { \n    Text,\n    Box,\n    Stack,\n    Flex,\n    IconButton,\n  } from \"@chakra-ui/react\"\nimport { AddIcon } from \"@chakra-ui/icons\"\nimport FormListItem from \"./FormListItem\"\nimport { DragDropContext, Droppable,  DroppableProvided, DropResult } from \"react-beautiful-dnd\";\nimport { uuID } from '../scripts/helpers'\nimport { Option } from '../interface/store'\n\ninterface Props {\n    label: string;\n    value: Option[];\n    onDelete: (id: string) => void;\n    onAdd: (id?: string) => void;\n    handleOnDragEnd: (result: DropResult) => void;\n    handleSubmit: (e) => void;\n}\n\nexport interface ComponentOption {\n    val: string;\n    content: string;\n}\n\nconst DynamicFormList = ({ \n    label,\n    value = [],\n    onDelete,\n    onAdd,\n    handleOnDragEnd,\n    handleSubmit,\n}: Props) => {\n\n    return (\n    <Box>\n        <Flex justifyContent=\"space-between\" \n            alignItems=\"center\" \n            mb={2}>\n            <Text fontWeight=\"semibold\">{label}</Text>\n            \n            <IconButton aria-label=\"Add Group\" \n                isRound={true} \n                colorScheme=\"teal\"\n                size=\"sm\"\n                icon={<AddIcon />} \n                onClick={() => onAdd()} />\n        </Flex>\n        <DragDropContext onDragEnd={handleOnDragEnd}>\n            <Droppable droppableId={`droppable-${uuID()}`}>\n                {(provided: DroppableProvided) => ( \n                    <Stack as=\"ol\" \n                        {...provided.droppableProps}\n                        ref={provided.innerRef}\n                        spacing=\"1.5\"\n                        border=\"1px dashed\"\n                        borderColor=\"gray.200\"\n                        padding=\"2\"\n                        minHeight=\"24\">             \n                        {value.map((v: Option, i) => ( \n                            <FormListItem\n                                key={v.id}\n                                id={v.id}\n                                index={i}\n                                optionData={v}\n                                onDelete={onDelete}\n                                handleSubmit={handleSubmit}\n                                label={v.label} />\n                        ))}\n                        {provided.placeholder}\n                    </Stack>\n                )}\n            </Droppable>\n        </DragDropContext>\n\n    </Box>)\n}\n\nexport default DynamicFormList","import React, { useState, useEffect } from 'react'\nimport { \n  Heading,\n  Stack,\n  Input,\n  FormControl,\n  FormLabel,\n  Select,\n  Checkbox,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n} from \"@chakra-ui/react\"\nimport DynamicList, { ComponentOption } from './DynamicList'\nimport { DropResult } from \"react-beautiful-dnd\"\nimport { FormGroup } from '../scripts/formGroup'\nimport { Root } from '../scripts/store'\nimport { FieldType, Group, Option } from '../interface/store'\nimport { FieldNode } from '../scripts/fieldNode'\nimport { selectTypes } from '../data/selectTypes'\nimport DynamicFormList from './DynamicFormList'\n\ninterface Props {\n  rootNode: Root;\n  curNode: FieldNode;\n  nextNode: (node: Root | FormGroup | FieldNode) => void;\n};\n\nconst fieldComponents: ComponentOption[] = [\n  {\n    val: 'customField',\n    content: 'Custom'\n  },\n  {\n    val: 'customField',\n    content: 'Custom Long Name Here Boy'\n  }\n]\n\nconst placeholderReqTypes = ['tel', 'text', 'textarea', 'email']\nconst patternReqTypes = ['tel', 'text', 'textarea']\nconst lengthReqTypes = ['tel', 'text', 'textarea', 'email']\n\nconst FieldPage = ({ rootNode, curNode, nextNode }: Props) => {\n  const [labelVal, setLabelVal] = useState(null)\n  const [typeVal, setTypeVal] = useState<FieldType>('')\n  const [requiredVal, setRequiredVal] = useState<boolean>(false)\n  const [placeholderVal, setPlaceholderVal] = useState<string>('')\n  const [checkedVal, setCheckVal] = useState<boolean>(false)\n  const [patternVal, setPatternVal] = useState<string>('')\n  const [minLengthVal, setMinLengthVal] = useState<string>('')\n  const [maxLengthVal, setMaxLengthVal] = useState<string>('')\n  const [optionsVal, setOptionsVal] = useState<Option[]>([])\n  const [subGroup, setSubGroup] = useState<Group[]>([])\n  const [subField, setSubField] = useState<Group[]>([])\n\n  // did mount\n  useEffect(() => {\n    if (curNode \n        && labelVal === null ) {\n      setLabelVal(curNode.title)\n      setTypeVal(curNode.type)\n      setRequiredVal(curNode.required)\n      setPlaceholderVal(curNode.placeholder)\n      setCheckVal(curNode.checked)\n      setPatternVal(curNode.pattern)\n      setMinLengthVal(curNode.minLength)\n      setMaxLengthVal(curNode.maxLength)\n      setOptionsVal(curNode.options)\n      setSubGroup(curNode.subGroups)\n      setSubField(curNode.subFields)\n    }\n  }, [curNode, labelVal, rootNode])\n\n  const onSetLabelVal = (val: string) => {\n    curNode.title = val;\n    setLabelVal(curNode.title);\n\n    const item = {\n      key: curNode.id,\n      label: curNode.title\n    }\n    if (curNode.fieldType === 'field') {\n      (curNode.parent as FormGroup).updateFieldItem(item)\n    } else if (curNode.fieldType === 'subField') {\n      (curNode.parent as FormGroup | FieldNode).updateSubFieldItem(item)\n    }\n  }\n\n  const onSetFieldType = (val: FieldType) => {\n    curNode.type = val;\n    setTypeVal(curNode.type);\n  }\n\n  const onSetRequiredVal = (val: boolean) => {\n    curNode.required = val;\n    setRequiredVal(curNode.required);\n  }\n\n  const onSetPlaceholderVal = (val: string) => {\n    curNode.placeholder = val;\n    setPlaceholderVal(curNode.placeholder);\n  }\n\n  const onSetCheckVal = (val: boolean) => {\n    curNode.checked = val;\n    setCheckVal(curNode.checked)\n  }\n\n  const onSetPatternVal = (val: string) => {\n    curNode.pattern = val;\n    setPatternVal(curNode.pattern);\n  }\n\n  const onSetMinLengthVal = (val: string) => {\n    curNode.minLength = val;\n    setMinLengthVal(curNode.minLength);\n  }\n\n  const onSetMaxLengthVal = (val: string) => {\n    curNode.maxLength = val;\n    setMaxLengthVal(curNode.maxLength)\n  }\n      \n  const onDelete = (id: string, type: 'subG' | 'subF') => {\n    switch (type) {\n      case 'subG':\n        const [group] = curNode.removeSubGroup(id)\n        setSubGroup(group as Group[])\n        break;\n      case 'subF':\n        const [subFieldArr] = curNode.removeSubField(id)\n        setSubField(subFieldArr as Group[])\n        break;\n    }\n  }\n\n  const onAdd = (type: 'subG' | 'subF', id?: string) => {\n    switch (type) {\n      case 'subG':\n        const [group] = curNode.createNewSubGroup()\n        setSubGroup(group as Group[])\n        break;\n      case 'subF':\n        const [subFieldArr] = curNode.creatNewSubField()\n        setSubField(subFieldArr as Group[])\n        break;\n    }\n    console.log({ rootNode, curNode})\n  }\n\n  const handleOnDragEnd = (result: DropResult,\n    type: 'subG' | 'subF' | 'opt',\n    curList: Group[] | Option[]) => {\n    if (!result.destination) return\n    const items = [...curList]\n    const [reorderedItem] = items.splice(result.source.index, 1)\n    items.splice(result.destination.index, 0, reorderedItem)\n\n    switch (type) {\n      case 'opt':\n        curNode.options = items as Option[];\n        setOptionsVal(curNode.options)\n        break;\n      case 'subG':\n        const [group] = curNode.updateSubGroupOrder(items as Group[])\n        setSubGroup(group as Group[])\n        break;\n      case 'subF':\n        const [subFieldArr] = curNode.updateSubFieldOrder(items as Group[])\n        setSubField(subFieldArr as Group[])\n        break;\n    }\n  }\n\n  const onGoToSubGroup = (id: string) => {\n    const node: FormGroup = curNode.getSubGroupData(id)\n    nextNode(node);\n  }\n\n  const onGoToSubField = (id: string) => {\n    const node: FieldNode = curNode.getSubFieldData(id)\n    nextNode(node);\n  }\n\n  const onRemoveOption = (id: string) => {\n    const updatedOpt = curNode.removeOption(id);\n    setOptionsVal(updatedOpt);\n  }\n\n  const onAddOption = () => {\n    const updatedOpt = curNode.addOption();\n    setOptionsVal(updatedOpt);\n  }\n\n  const updateOption = (e: Option) => {\n    const updatedOpt = curNode.updateOption(e);\n    setOptionsVal(updatedOpt);\n  }\n\n  return (<>\n    <Stack as=\"main\" spacing={6}>\n      <Heading as=\"h1\">\n          Field\n      </Heading>\n      <Stack as=\"form\" spacing={6}>\n          <FormControl>\n              <FormLabel htmlFor=\"title\">Title</FormLabel>\n              <Input name=\"title\" \n                  value={labelVal || ''}\n                  onChange={e => onSetLabelVal(e.target.value)}\n                  placeholder=\"Form Title\"\n              />\n          </FormControl>\n          <FormControl>\n            <FormLabel htmlFor=\"type\">Type</FormLabel>\n            <Select \n              name=\"type\"\n              onChange={(e) => onSetFieldType(e.target.value as FieldType)}\n              value={typeVal}\n              placeholder=\"Select option\">\n              {selectTypes.map(({value, label}) => (\n                <option key={value} value={value}>\n                  {label}\n                </option>\n              ))}\n            </Select>\n          </FormControl>\n          <FormControl>\n            <Checkbox\n              checked={requiredVal}\n              onChange={(e) => onSetRequiredVal(e.target.checked)}>\n              Required Field\n            </Checkbox>\n          </FormControl>\n          {(placeholderReqTypes.includes(typeVal)) && <FormControl>\n              <FormLabel htmlFor=\"placeholder\">Placeholder Text</FormLabel>\n              <Input name=\"placeholder\" \n                  value={placeholderVal || ''}\n                  onChange={(e) => onSetPlaceholderVal(e.target.value)}\n                  placeholder=\"Enter Placeholder\"\n              />\n          </FormControl>}\n          {(typeVal === 'checkbox') && <Checkbox\n              checked={checkedVal}\n              onChange={(e) => onSetCheckVal(e.target.checked)}>\n              Checked\n            </Checkbox>\n          }\n          {(patternReqTypes.includes(typeVal)) && <FormControl>\n              <FormLabel htmlFor=\"pattern\">Pattern</FormLabel>\n              <Input name=\"pattern\" \n                  value={patternVal || ''}\n                  onChange={(e) => onSetPatternVal(e.target.value)}\n                  placeholder=\"Pattern which will be matched with value\"\n              />\n          </FormControl>}\n          {(lengthReqTypes.includes(typeVal)) && <>\n                <FormControl>\n                  <FormLabel htmlFor=\"minLength\">Value Min Length</FormLabel>\n                  <NumberInput\n                    name=\"minLength\"\n                    onChange={(val) => onSetMinLengthVal(val)}\n                    value={minLengthVal}>\n                    <NumberInputField />\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n              </FormControl>\n              <FormControl>\n                  <FormLabel htmlFor=\"maxLength\">Value Max Length</FormLabel>\n                  <NumberInput \n                    name=\"maxLength\"\n                    onChange={(val) => onSetMaxLengthVal(val)}\n                    value={maxLengthVal}>\n                    <NumberInputField />\n                    <NumberInputStepper>\n                      <NumberIncrementStepper />\n                      <NumberDecrementStepper />\n                    </NumberInputStepper>\n                  </NumberInput>\n              </FormControl>\n            </>}\n          {(typeVal === 'select') && <DynamicFormList \n            label=\"Options List\"\n            value={optionsVal}\n            onDelete={onRemoveOption}\n            onAdd={onAddOption}\n            handleOnDragEnd={(v: DropResult) => handleOnDragEnd(v, 'opt', optionsVal)}\n            handleSubmit={updateOption} />}\n          <DynamicList \n            label=\"Sub Groups\"\n            value={subGroup}\n            onDelete={(id: string) => onDelete(id, 'subG')}\n            onAdd={() => onAdd('subG')}\n            onGoToGroup={onGoToSubGroup}\n            handleOnDragEnd={(v: DropResult) => handleOnDragEnd(v, 'subG', subGroup)} />\n          <DynamicList \n            label=\"Sub Fields\"\n            value={subField}\n            components={fieldComponents}\n            onDelete={(id: string) => onDelete(id, 'subF')}\n            onAdd={(id) => onAdd('subF', id)}\n            onGoToGroup={onGoToSubField}\n            handleOnDragEnd={(v: DropResult) => handleOnDragEnd(v, 'subF', subField)} />\n      </Stack>\n    </Stack>\n  </>)\n}\n\nexport default FieldPage","import React, { useState, useEffect, useCallback } from 'react';\nimport { Root } from '../scripts/store'\nimport Home from './Home'\nimport GroupPage from './GroupPage'\nimport { FormGroup } from '../scripts/formGroup'\nimport { Box, Link, Button, Spacer } from \"@chakra-ui/react\"\nimport { ChevronLeftIcon } from \"@chakra-ui/icons\"\nimport { FieldNode } from '../scripts/fieldNode';\nimport { AnimatePresence, motion, MotionStyle } from \"framer-motion\"\nimport FieldPage from './FieldPage'\nimport { Store } from '../interface/store';\n\nconst variants = {\n  enter: {\n    x:  1000,\n    zIndex: 0,\n  },\n  center: {\n    zIndex: 1,\n    x: 0,\n  },\n  exit: {\n    x: -1000,\n  }\n};\n\nconst pageTransition = {\n  x: { \n    type: \"spring\",\n    stiffness: 300,\n    damping: 30,\n    duration: 0.2 },\n}\n\nconst pageStyle: MotionStyle = {\n  gridRow: 1,\n  gridColumn: 1\n}\n\nexport interface Props {\n  rootNode: Root;\n  curNode: Root | FormGroup;\n  nextNode: (node: Root | FormGroup) => void;\n};\n\nconst StoreWrapper = (props) => {\n  const [page, setPage] = useState('root')\n  const [rootNode, setRootNode] = useState<Root>(null)\n  const [curNode, setCurNode] = useState<Root | FormGroup | FieldNode>(null)\n\n  const initSetUp = (data: Store = {} as Store) => {\n    setCurNode(null)\n    setRootNode(null)\n    const node = new Root(data)\n    setRootNode(node)\n    setCurNode(node)\n  }\n\n  useEffect(() => {\n    if (!rootNode) {\n      initSetUp()\n    }\n  }, [rootNode])\n\n  const onMessageReceivedFromIframe = useCallback(\n    event => {\n      console.log(\"onMessageReceivedFromIframe\");\n      const formData: Store = event.data.formData;\n      console.log({ data: event.data, formData })\n      if (event.data?.source  !== \"react-devtools-bridge\" || \n        event.data?.source  !== 'react-devtools-content-script') {\n        if (event && typeof formData === 'object' \n          && formData !== null) {\n          console.log('run on mess')\n          // initSetUp(formData)\n          rootNode.updateRoot(formData)\n          setCurNode(null)\n          setCurNode(rootNode);\n        }\n      }\n    },\n    [rootNode]\n  );\n\n  useEffect(() => {\n    console.log('add')\n    window.addEventListener(\"message\", onMessageReceivedFromIframe);\n    return () => {\n      window.removeEventListener(\"message\", onMessageReceivedFromIframe);\n      console.log('removed')\n    }\n    \n  }, [onMessageReceivedFromIframe]);\n\n  const nextNode = (node: Root | FormGroup | FieldNode) => {\n    setCurNode(node)\n    setPage(node.position)\n  }\n\n  const prevPage = () => {\n    const prevNode: FormGroup | FieldNode = curNode as FormGroup | FieldNode\n    nextNode(prevNode.parent)\n  }\n\n  const getFullStore = () => {\n    const formData = rootNode.getStoreData()\n    console.log(JSON.stringify(formData));\n    window.parent.postMessage({ formData }, '*')\n  }\n\n  return (\n  <>\n    <Box as=\"header\" d=\"flex\" >\n      {(page !== 'root') && (\n        <Link d=\"flex\" alignItems=\"center\" onClick={prevPage}>\n          <ChevronLeftIcon mx=\"2px\" />\n          {((curNode as FormGroup)?.parent as FormGroup)?.label || \n          ((curNode as FieldNode)?.parent as FieldNode)?.title || 'Root Page'}\n        </Link>)}\n        <Spacer transition=\"flex 0.2s\" flex={page !== 'root' ? '1' : '0'} />\n        <Button onClick={getFullStore}>PRINT DATA</Button>\n    </Box>\n    <Box d=\"grid\" position=\"relative\" >\n      { curNode ? (\n        <AnimatePresence initial={false}>\n          {(page === 'root') && (<motion.div key={curNode.id}\n              style={{\n                ...pageStyle,\n  \n              }}\n              initial=\"enter\"\n              animate=\"center\"\n              exit=\"exit\"\n              variants={variants}\n              transition={pageTransition}>\n              <Home rootNode={rootNode} curNode={curNode as Root} nextNode={nextNode} />\n            </motion.div>)}\n          {(page === 'group') && <motion.div key={curNode.id}\n              style={{ ...pageStyle,\n \n              }}\n              variants={variants}\n              initial=\"enter\"\n              animate=\"center\"\n              exit=\"exit\"\n              transition={pageTransition}>\n              <GroupPage\n                  rootNode={rootNode} curNode={curNode as FormGroup} nextNode={nextNode} />\n            </motion.div>}\n            {(page === 'field') && <motion.div key={curNode.id}\n                style={{\n                  ...pageStyle,\n              \n                }}\n                variants={variants}\n                initial=\"enter\"\n                animate=\"center\"\n                exit=\"exit\"\n                transition={pageTransition}>\n                <FieldPage rootNode={rootNode} curNode={curNode as FieldNode} nextNode={nextNode}/>\n              </motion.div>}\n        </AnimatePresence>) \n        : <h1>Loading...</h1>\n      }\n    </Box>\n    <footer>\n    </footer>\n    \n  </>)\n}\n\nexport default StoreWrapper\n\nfunction setRoot(arg0: Root) {\n  throw new Error('Function not implemented.');\n}\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { ChakraProvider } from \"@chakra-ui/react\"\nimport { Container } from \"@chakra-ui/react\"\nimport StoreWrapper from './components/StoreWrapper'\n\n\nfunction App() {\n  return (\n    <ChakraProvider resetCSS={true}>\n        <Container className=\"\" maxW=\"xl\" position=\"relative\">\n            <StoreWrapper />\n        </Container>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}